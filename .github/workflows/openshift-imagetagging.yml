name: Trigger deployment to test/prod Openshift environnment by Image stream re-tagging and labelling pod

on:        
    workflow_dispatch:
        inputs:
            app:
                description: 'App Name (jag-scss)'    
                required: true
            imageSourceEnv:
                description: 'Image Source Env'     
                required: true
                default: 'dev'
            imageTargetEnv:
                description: 'Target Release Env'
                required: true
jobs:
  oc-image-tagging:
    runs-on: ubuntu-20.04
    environment: ${{ github.event.inputs.imageTargetEnv }}
    steps:

      - name: Git Checkout
        uses: actions/checkout@v2
        
        # Get the version number which is prefixed with the Github release branches in format release/{version}
      - name: Get Release Version
        run: |
          branch=${GITHUB_REF##*/}
          version=$(echo $branch | cut -d "/" -f2-)
          echo "releaseVersion=$version" >> $GITHUB_ENV
      
      - name: Print Release Details
        run: |
          echo "Release version is ${{ env.releaseVersion }}"
          echo "Release Environment: ${{ github.event.inputs.environment }}"

        #Login to Openshift using OC Tools SA and Token for image stream tagging changes
      - name: Authenticate OC Tools SA
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_TOOLS_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_TOOLS_DEPLOYER_TOKEN}}
        
        # Re-Tag latest dev (source) image to other env to trigger openshift deployment via DeploymentConfig
        # It also creates a tag with release version number to use it in case of rollback.
      - name: Retag image to release env and version.
        env:
          appName: ${{ github.event.inputs.app }}
          imageSourceEnv: ${{ github.event.inputs.imageSourceEnv }}
          imageTargetEnv: ${{ github.event.inputs.imageTargetEnv }}
          openshiftToolsNamespace: ${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}
          openshiftIImageRegistry: ${{secrets.OPENSHIFT_INTERNAL_REPOSITORY}}
          releaseVersion: ${{ env.releaseVersion }}
        run: |
          oc tag ${openshiftIImageRegistry}/${openshiftToolsNamespace}/${appName}:${imageSourceEnv} ${appName}:${imageTargetEnv}
          oc tag ${openshiftIImageRegistry}/${openshiftToolsNamespace}/${appName}:${imageSourceEnv} ${appName}:${releaseVersion}

        #Login to Openshift using OC SA and Token of respective env. for Pod labelling
      - name: Authenticate OC Env Specific SA
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN}}	  
        
        # Labels the pods with release version number for better identification.
      - name: Labelling Pod to release version
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{ github.event.inputs.app }}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.imageTargetEnv }}
        run: |
          oc label pods -l name=${appName} -n ${openshiftEnvNamespace} version=${releaseVersion} --overwrite